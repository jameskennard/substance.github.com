{"version":3,"file":"app.js","sources":["../../image/fixture.js","../../image/app.js"],"sourcesContent":["export default function(tx) {\n  let body = tx.get('body')\n  tx.create({\n    id: 'p1',\n    type: 'paragraph',\n    content: \"Insert a new image using the image tool.\"\n  })\n  body.show('p1')\n\n  tx.create({\n    id: 'f1',\n    type: 'file',\n    fileType: 'image',\n    url: 'https://pbs.twimg.com/profile_images/706616363599532032/b5z-Hw5g.jpg'\n  })\n  tx.create({\n    id: 'i1',\n    type: 'image',\n    imageFile: 'f1'\n  })\n  body.show('i1')\n  tx.create({\n    id: 'p2',\n    type: 'paragraph',\n    content: \"Please note that images are not actually uploaded in this example. You would need to provide a custom file client that talks to an image store. See FileClientStub which reveals the API you have to implement.\"\n  })\n  body.show('p2')\n  tx.create({\n    id: 'i2',\n    type: 'image',\n    imageFile: 'f1'\n  })\n  body.show('i2')\n}","import {\n  ProseEditor, ProseEditorConfigurator, EditorSession,\n  ProseEditorPackage, ImagePackage, PersistencePackage\n} from 'substance'\n\nimport fixture from './fixture'\n\nclass SaveHandlerStub {\n\n  /*\n    Saving a document involves two steps.\n    - syncing files (e.g. images) with a backend\n    - storing a snapshot of the document's content (e.g. a XML serialization)\n  */\n  saveDocument(params) {\n    console.info('Simulating save ...', params)\n\n    return params.fileManager.sync()\n    .then(() => {\n      // Here you would run a converter (HTML/XML) usually\n      // and send the result to a REST endpoint.\n      console.info('Creating document snapshot...')\n    })\n\n  }\n}\n\nlet cfg = new ProseEditorConfigurator()\ncfg.import(ProseEditorPackage)\ncfg.import(ImagePackage)\n// Enable save button\ncfg.import(PersistencePackage)\ncfg.setSaveHandlerClass(SaveHandlerStub)\n\nwindow.onload = function() {\n  let doc = cfg.createArticle(fixture)\n  let editorSession = new EditorSession(doc, {\n    configurator: cfg\n  })\n  ProseEditor.mount({\n    editorSession: editorSession\n  }, document.body)\n}\n"],"names":["let","ProseEditorConfigurator","ProseEditorPackage","ImagePackage","PersistencePackage","EditorSession","ProseEditor"],"mappings":";;;;;;AAAA,cAAe,SAAS,EAAE,EAAE;EAC1BA,IAAI,IAAI,GAAG,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,CAAA;EACzB,EAAE,CAAC,MAAM,CAAC;IACR,EAAE,EAAE,IAAI;IACR,IAAI,EAAE,WAAW;IACjB,OAAO,EAAE,0CAA0C;GACpD,CAAC,CAAA;EACF,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;;EAEf,EAAE,CAAC,MAAM,CAAC;IACR,EAAE,EAAE,IAAI;IACR,IAAI,EAAE,MAAM;IACZ,QAAQ,EAAE,OAAO;IACjB,GAAG,EAAE,sEAAsE;GAC5E,CAAC,CAAA;EACF,EAAE,CAAC,MAAM,CAAC;IACR,EAAE,EAAE,IAAI;IACR,IAAI,EAAE,OAAO;IACb,SAAS,EAAE,IAAI;GAChB,CAAC,CAAA;EACF,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;EACf,EAAE,CAAC,MAAM,CAAC;IACR,EAAE,EAAE,IAAI;IACR,IAAI,EAAE,WAAW;IACjB,OAAO,EAAE,iNAAiN;GAC3N,CAAC,CAAA;EACF,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;EACf,EAAE,CAAC,MAAM,CAAC;IACR,EAAE,EAAE,IAAI;IACR,IAAI,EAAE,OAAO;IACb,SAAS,EAAE,IAAI;GAChB,CAAC,CAAA;EACF,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;;;ACzBjB,IAAM,eAAe,GAAC;;AAAA,0BAOpB,YAAY,0BAAC,MAAM,EAAE;EACrB,OAAS,CAAC,IAAI,CAAC,qBAAqB,EAAE,MAAM,CAAC,CAAA;;EAE7C,OAAS,MAAM,CAAC,WAAW,CAAC,IAAI,EAAE;GAC/B,IAAI,CAAC,YAAG;;;IAGT,OAAS,CAAC,IAAI,CAAC,+BAA+B,CAAC,CAAA;GAC9C,CAAC;;CAEH,CAAA;;AAGHA,IAAI,GAAG,GAAG,IAAIC,iCAAuB,EAAE,CAAA;AACvC,GAAG,CAAC,MAAM,CAACC,4BAAkB,CAAC,CAAA;AAC9B,GAAG,CAAC,MAAM,CAACC,sBAAY,CAAC,CAAA;;AAExB,GAAG,CAAC,MAAM,CAACC,4BAAkB,CAAC,CAAA;AAC9B,GAAG,CAAC,mBAAmB,CAAC,eAAe,CAAC,CAAA;;AAExC,MAAM,CAAC,MAAM,GAAG,WAAW;EACzBJ,IAAI,GAAG,GAAG,GAAG,CAAC,aAAa,CAAC,OAAO,CAAC,CAAA;EACpCA,IAAI,aAAa,GAAG,IAAIK,uBAAa,CAAC,GAAG,EAAE;IACzC,YAAY,EAAE,GAAG;GAClB,CAAC,CAAA;EACFC,qBAAW,CAAC,KAAK,CAAC;IAChB,aAAa,EAAE,aAAa;GAC7B,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAA;CAClB,CAAA;;"}